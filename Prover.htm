<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Optimized Proof System</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }
        .input-container {
            position: relative;
            flex: 1;
        }
        #line-numbers {
            position: absolute;
            left: 0;
            top: 0;
            width: 30px;
            padding: 10px 5px;
            text-align: right;
            color: #666;
            background-color: #e0e0e0;
            border: 1px solid #ccc;
            border-right: none;
            overflow: hidden;
            user-select: none;
            font-size: 14px;
            line-height: 1.5;
        }
        textarea {
            width: 100%;
            height: 300px;
            padding: 10px;
            padding-left: 45px;
            border: 1px solid #ccc;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            display: block;
        }
        #output {
            flex: 1;
            background-color: #fff;
            white-space: pre-wrap;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }
        button:hover {
            background-color: #45a049;
        }
        .stats {
            margin-top: 10px;
            padding: 10px;
            background-color: #e8f4f8;
            border-radius: 4px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <h1>Optimized Proof System</h1>
    <div class="container">
        <div class="input-container">
            <div id="line-numbers"></div>
            <textarea id="input" placeholder="Enter axioms and proof statement..."></textarea>
        </div>
        <textarea id="output" readonly placeholder="Proof output will appear here..."></textarea>
    </div>
    <button onclick="solveProblem()">Generate Proof</button>
    <div id="stats" class="stats"></div>

    <script>
        let _input = document.getElementById('input');
        let _output = document.getElementById('output');
        let _lineNumbers = document.getElementById('line-numbers');
        let _stats = document.getElementById('stats');

        // Priority queue implementation for A* search
        class PriorityQueue {
            constructor() {
                this.items = [];
            }
            
            enqueue(element, priority) {
                this.items.push({element, priority});
                this.items.sort((a, b) => a.priority - b.priority);
            }
            
            dequeue() {
                return this.items.shift()?.element;
            }
            
            isEmpty() {
                return this.items.length === 0;
            }
            
            size() {
                return this.items.length;
            }
        }

        function solveProblem() {
            const { axioms, proofStatement } = parseInput(_input.value);
            const startTime = performance.now();
            const result = generateProofOptimized(axioms, proofStatement);
            const endTime = performance.now();
            
            _output.value = result.proof;
            _output.value += `\n\nTotal runtime: ${(endTime - startTime).toFixed(4)} ms`;
            
            // Display statistics
            _stats.innerHTML = `
                <strong>Search Statistics:</strong><br>
                States explored: ${result.stats.statesExplored}<br>
                Unique states: ${result.stats.uniqueStates}<br>
                Queue operations: ${result.stats.queueOps}<br>
                Search depth: ${result.stats.maxDepth}<br>
                Strategy: ${result.stats.strategy}
            `;
        }

        function parseInput(input) {
            let lines = input
                .split('\n')
                .filter(line => line.trim() && !line.startsWith('//'));
            let axiomsSet = new Set();

            lines.slice().forEach((line, k) => {
                const parts = line
                    .split(/[~<]?=+[>]?/g)
                    .map(s => s.trim());
                parts.forEach((part, i) => {
                    parts.slice(i + 1).forEach(otherPart => {
                        axiomsSet.add({
                            subnets: `${part} = ${otherPart}`,
                            axiomID: `axiom_${k + 1}.0`,
                            guidZ: k
                        });
                    });
                });
            });

            const sortedAxioms = Array.from(axiomsSet).map(axiom => {
                axiom.subnets = axiom.subnets
                    .split(' = ')
                    .sort((a, b) => a.length - b.length)
                    .map(pair => pair.match(/\S+/g));
                return axiom;
            });

            const proofStatement = sortedAxioms[sortedAxioms.length - 1];
            return {
                axioms: sortedAxioms.slice(0, -1),
                proofStatement: proofStatement
            };
        }

        function generateProofOptimized(axioms, proofStatement) {
            const [lhs, rhs] = proofStatement.subnets;
            const lhsStr = lhs.join(' ');
            const rhsStr = rhs.join(' ');
            
            // Statistics tracking
            const stats = {
                statesExplored: 0,
                uniqueStates: 0,
                queueOps: 0,
                maxDepth: 0,
                strategy: 'A* with heuristic'
            };

            // If already equal, return immediately
            if (lhsStr === rhsStr) {
                return {
                    proof: "Proof Found!\n\n" + lhsStr + " = " + rhsStr + ", trivial\n\nQ.E.D.",
                    stats
                };
            }

            // Heuristic function: estimate distance between two expressions
            function heuristic(expr1, expr2) {
                const arr1 = expr1.split(' ');
                const arr2 = expr2.split(' ');
                
                // Combine multiple heuristics
                let h = 0;
                
                // Length difference
                h += Math.abs(arr1.length - arr2.length) * 2;
                
                // Token difference
                const tokens1 = new Set(arr1);
                const tokens2 = new Set(arr2);
                const common = new Set([...tokens1].filter(x => tokens2.has(x)));
                h += (tokens1.size + tokens2.size - 2 * common.size);
                
                // Position-based difference
                const minLen = Math.min(arr1.length, arr2.length);
                for (let i = 0; i < minLen; i++) {
                    if (arr1[i] !== arr2[i]) h += 1;
                }
                
                return h;
            }

            // Unified search state
            class SearchState {
                constructor(expr, path, side, depth = 0) {
                    this.expr = expr;
                    this.exprStr = expr.join(' ');
                    this.path = path;
                    this.side = side; // 'lhs' or 'rhs'
                    this.depth = depth;
                }
                
                getPriority(targetStr) {
                    // f(n) = g(n) + h(n)
                    const g = this.depth; // Cost so far
                    const h = heuristic(this.exprStr, targetStr); // Heuristic estimate
                    return g + h;
                }
            }

            // Bidirectional A* search
            const lhsQueue = new PriorityQueue();
            const rhsQueue = new PriorityQueue();
            const lhsVisited = new Map(); // expression -> state
            const rhsVisited = new Map();
            
            // Initialize with starting states
            const lhsStart = new SearchState(lhs, [{expr: lhs, rule: 'start'}], 'lhs');
            const rhsStart = new SearchState(rhs, [{expr: rhs, rule: 'start'}], 'rhs');
            
            lhsQueue.enqueue(lhsStart, lhsStart.getPriority(rhsStr));
            rhsQueue.enqueue(rhsStart, rhsStart.getPriority(lhsStr));
            lhsVisited.set(lhsStr, lhsStart);
            rhsVisited.set(rhsStr, rhsStart);

            // Generate all possible rewrites for an expression
            function* generateRewrites(expr, axiomList) {
                for (const axiom of axiomList) {
                    // Try both directions
                    for (const [from, to] of [[axiom.subnets[0], axiom.subnets[1]], 
                                               [axiom.subnets[1], axiom.subnets[0]]]) {
                        // Try all positions
                        const results = [
                            tryReplace(expr, from, to, 'A'),
                            tryReplace(expr, from, to, 'B')
                        ];
                        
                        for (const result of results) {
                            if (result) {
                                yield {
                                    expr: result,
                                    axiom: axiom.axiomID,
                                    direction: from === axiom.subnets[0] ? 'forward' : 'backward'
                                };
                            }
                        }
                    }
                }
            }

            // Main search loop
            let iterations = 0;
            const maxIterations = 10000;
            
            while (!lhsQueue.isEmpty() || !rhsQueue.isEmpty()) {
                if (iterations++ > maxIterations) break;
                
                // Alternate between queues for balanced search
                for (const [queue, visited, otherVisited, side, targetStr] of [
                    [lhsQueue, lhsVisited, rhsVisited, 'lhs', rhsStr],
                    [rhsQueue, rhsVisited, lhsVisited, 'rhs', lhsStr]
                ]) {
                    if (queue.isEmpty()) continue;
                    
                    const current = queue.dequeue();
                    if (!current) continue;
                    
                    stats.statesExplored++;
                    stats.queueOps++;
                    stats.maxDepth = Math.max(stats.maxDepth, current.depth);
                    
                    // Check if we've met in the middle
                    if (otherVisited.has(current.exprStr)) {
                        const otherState = otherVisited.get(current.exprStr);
                        return {
                            proof: constructProof(current, otherState),
                            stats
                        };
                    }
                    
                    // Generate and explore neighbors
                    for (const rewrite of generateRewrites(current.expr, axioms)) {
                        const newExprStr = rewrite.expr.join(' ');
                        
                        // Skip if already visited with shorter path
                        if (visited.has(newExprStr) && 
                            visited.get(newExprStr).depth <= current.depth + 1) {
                            continue;
                        }
                        
                        const newState = new SearchState(
                            rewrite.expr,
                            [...current.path, {
                                expr: rewrite.expr,
                                rule: `${rewrite.axiom} (${rewrite.direction})`
                            }],
                            side,
                            current.depth + 1
                        );
                        
                        visited.set(newExprStr, newState);
                        queue.enqueue(newState, newState.getPriority(targetStr));
                        stats.queueOps++;
                        stats.uniqueStates = visited.size + otherVisited.size;
                    }
                }
            }
            
            // No proof found
            return {
                proof: "No proof found within search limits.",
                stats
            };
        }

        // Construct the final proof from two meeting paths
        function constructProof(lhsState, rhsState) {
            let proof = "Proof Found!\n\n";
            
            // LHS transformations
            for (let i = 0; i < lhsState.path.length; i++) {
                const step = lhsState.path[i];
                proof += `${step.expr.join(' ')} = ${rhsState.path[0].expr.join(' ')}`;
                if (step.rule !== 'start') {
                    proof += `, via ${step.rule}`;
                }
                proof += '\n';
            }
            
            // RHS transformations (in reverse)
            for (let i = 1; i < rhsState.path.length; i++) {
                const step = rhsState.path[i];
                proof += `${lhsState.path[lhsState.path.length - 1].expr.join(' ')} = ${step.expr.join(' ')}`;
                proof += `, via ${step.rule}\n`;
            }
            
            proof += "\nQ.E.D.";
            return proof;
        }

        // Optimized replacement functions
        function tryReplace(arr, from, to, method) {
            if (from.length > arr.length) return false;
            
            if (method === 'A') {
                // First occurrence replacement
                for (let i = 0; i <= arr.length - from.length; i++) {
                    let match = true;
                    for (let j = 0; j < from.length; j++) {
                        if (arr[i + j] !== from[j]) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        return [...arr.slice(0, i), ...to, ...arr.slice(i + from.length)];
                    }
                }
            } else if (method === 'B') {
                // All occurrences replacement
                let result = [...arr];
                let changed = false;
                
                for (let i = arr.length - from.length; i >= 0; i--) {
                    let match = true;
                    for (let j = 0; j < from.length; j++) {
                        if (result[i + j] !== from[j]) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        result.splice(i, from.length, ...to);
                        changed = true;
                    }
                }
                
                return changed ? result : false;
            }
            
            return false;
        }

        // UI functions
        function updateLineNumbers() {
            const lines = _input.value.split('\n');
            let i = 1;
            _lineNumbers.innerHTML = lines
                .map(u => /^[^\/\t\s\n]+/.test(u) ? i++ : '')
                .join('<br>');
        }

        _input.addEventListener('keyup', updateLineNumbers);
        _input.addEventListener('scroll', function() {
            _lineNumbers.scrollTop = this.scrollTop;
        });

        // Initialize with example
        _input.value = `// Axioms and Lemmas
1 + 1 = 2
2 + 2 = 4

// Prove
1 + 2 + 1 = 4`;

        updateLineNumbers();
    </script>
</body>
</html>